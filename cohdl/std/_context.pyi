from __future__ import annotations

from typing import Callable, overload, TypeVar

import enum

import cohdl
from cohdl import BitSignalEvent, SourceLocation

T = TypeVar("T")

class Reset:
    def __init__(
        self,
        signal: cohdl.Signal[cohdl.Bit],
        active_low: bool = False,
        is_async: bool = False,
    ): ...
    def is_async(self) -> bool: ...
    def is_active_low(self) -> bool: ...
    def is_active_high(self) -> bool: ...
    def active_high_signal(self) -> cohdl.Signal[cohdl.Bit]: ...
    def active_low_signal(self) -> cohdl.Signal[cohdl.Bit]: ...
    def signal(self) -> cohdl.Signal[cohdl.Bit]: ...

class Frequency:
    def __init__(self, val: int | float | Frequency | Period): ...
    def period(self) -> Period: ...
    @overload
    def gigahertz(self: Frequency) -> float: ...
    @overload
    @staticmethod
    def gigahertz(val: int | float) -> Frequency: ...
    @overload
    def megahertz(self: Frequency) -> float: ...
    @overload
    @staticmethod
    def megahertz(val: int | float) -> Frequency: ...
    @overload
    def kilohertz(self: Frequency) -> float: ...
    @overload
    @staticmethod
    def kilohertz(val: int | float) -> Frequency: ...
    @overload
    def hertz(self: Frequency) -> float: ...
    @overload
    @staticmethod
    def hertz(val: int | float) -> Frequency: ...
    def __eq__(self, other: Frequency) -> bool: ...

class Period:
    def __init__(self, val: int | float | Frequency | Period): ...
    def frequency(self) -> Frequency: ...
    @overload
    def picoseconds(self: Period) -> float: ...
    @overload
    @staticmethod
    def picoseconds(val: int | float) -> Period: ...
    @overload
    def nanoseconds(self: Period) -> float: ...
    @overload
    @staticmethod
    def nanoseconds(val: int | float) -> Period: ...
    @overload
    def microseconds(self: Period) -> float: ...
    @overload
    @staticmethod
    def microseconds(val: int | float) -> Period: ...
    @overload
    def milliseconds(self: Period) -> float: ...
    @overload
    @staticmethod
    def milliseconds(val: int | float) -> Period: ...
    @overload
    def seconds(self: Period) -> float: ...
    @overload
    @staticmethod
    def seconds(val: int | float) -> Period: ...
    def __eq__(self, other: Period) -> bool: ...

class ClockEdge(enum.Enum):
    NEITHER = enum.auto()
    RISING = enum.auto()
    FALLING = enum.auto()
    BOTH = enum.auto()

    def event_type(self) -> BitSignalEvent.Type: ...

class Clock:
    Edge = ClockEdge

    def __init__(
        self,
        clk_signal: cohdl.Signal[cohdl.Bit],
        active_edge: ClockEdge = ClockEdge.RISING,
        frequency: Frequency | int | None = None,
        period: Period | int | None = None,
        duty: float = 0.5,
        phase: float = 0.0,
    ): ...
    def is_rising_edge(self) -> bool: ...
    def is_falling_edge(self) -> bool: ...
    def edge(self) -> ClockEdge: ...
    def signal(self) -> cohdl.Signal[cohdl.Bit]: ...
    def frequency(self) -> Frequency: ...
    def period(self) -> Period: ...
    def duty(self) -> float: ...
    def phase(self) -> float: ...
    def rising(self) -> Clock: ...
    def falling(self) -> Clock: ...
    def both(self) -> Clock: ...

def block(
    fn: Callable | None = None, /, comment=None, attributes: dict | None = None
): ...
def concurrent(
    fn: Callable | None = None,
    capture_lazy: bool = False,
    comment=None,
    attributes: dict | None = None,
): ...
def sequential(
    trigger,
    reset=None,
    capture_lazy: bool = False,
    comment=None,
    attributes: dict | None = None,
): ...
